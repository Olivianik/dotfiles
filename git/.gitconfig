[user]
    name = Tatsuya Fujisaki
    email = tatsuya.fujisaki@example.com
[core]
    excludesfile = ~/.gitignore
    editor = code -w
    autocrlf = input # Set "input" on Linux/Mac. Set "true" on Windows. https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration
    # whitespace = cr-at-eol # prevents "git diff" on Windows from showing "^M".
[credential]
    helper = osxkeychain # sets "osxkeychain" on Mac. Set "wincred" on Windows, instead.
[fetch]
    prune = true
    pruneTags = true
    recurseSubmodules = true
[http]
    sslVerify = false
    emptyAuth = true # prevents "remote: HTTP Basic: Accesss denied" when cloning a repository. https://docs.gitlab.com/ee/integration/kerberos.html#http-basic-access-denied-when-cloning
[pull]
    rebase = true
[rebase]
    autosquash = true
    autostash = true
[diff]
    tool = vscode
[difftool]
    prompt = false
[difftool "vscode"]
    cmd = code -w -d $LOCAL $REMOTE
[merge]
    tool = vscode
[mergetool]
    prompt = false
[mergetool "vscode"]
    cmd = code -w $MERGED
[alias]
    a = add --all
    agp = stash push --include-untracked --message agp -- build.gradle
    ar = archive -o output.zip HEAD
    b = branch --show-current # has been available since 2.22.
    ba = branch --all
    bd = branch -D # -D is a shortcut for "--delete --force".
    bl = blame -L # <line-number> <file>
    bm = branch --move
    ca = commit --all -m
    caam = commit -a --amend -m # stages all changes and replaces the previous commit using the new commit message.
    caan = commit -a --amend --no-edit # stages all changes and replaces the previous commit reusing the existing commit message.
    cam = commit --amend -m # replaces the previous commit using the new commit message.
    can = commit --amend --no-edit # replaces the previous commit reusing the existing commit message.
    cb = clone --branch
    cge = config --global --edit # opens ~/.gitconfig
    cgl = config --global --list # lists all the variables in ~/.gitconfig
    cm = commit -m
    co = checkout
    cp = cherry-pick
    csol = config --show-origin --list
    dl = !git branch | grep -v master | grep -v develop | xargs git branch -D # -D is a shortcut for "--delete --force". "dl" means "delete local branches".
    dno = diff --name-only
    dns = diff --name-status
    dsd = diff --stat develop
    dt = difftool
    fd = fetch origin develop:develop
    l = log --graph --decorate --oneline
    lp = log --patch -- # takes <file> and shows the change history of the file.
    m = merge --no-edit --squash # Note: With --squash, --commit is not allowed, and will fail. https://git-scm.com/docs/git-merge#Documentation/git-merge.txt---no-squash
    md = !git fetch origin develop:develop && git merge --no-edit develop
    mt = mergetool
    pf = push --force
    ra = rebase --abort
    rc = rebase --continue
    rd = !git fetch origin develop:develop && git rebase develop
    rgu = remote get-url # is normally followed by origin or upstream, which is an original repository you fork from.
    ri = rebase --interactive
    rs = rebase --skip
    rsh = reset HEAD~
    rsu = remote set-url # is normally followed by origin or upstream, which is an original repository you fork from.
    sno = show --name-only
    sns = show --name-status
    sw = switch
    swc = switch --create
    # git clean:
    # -d is to delete untracked directories too.
    # git restore:
    # --staged is to undo staged changes.
    # --worktree is to undo unstaged changes.
    up = !git clean -d --force && git restore --staged --worktree . && git pull --all --autostash --rebase --recurse-submodules && git fetch --prune --prune-tags
    upfork = !git switch master && git rebase upstream/master
    # stash-related
    pop = stash pop
    sa = stash apply
    sc = stash clear
    sd = stash drop
    sl = stash list
    ss = stash show
    st = stash push --include-untracked
